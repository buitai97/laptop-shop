// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(255)
  email       String? @db.VarChar(255)
  address     String? @db.VarChar(255)
  username    String? @unique @db.VarChar(255)
  password    String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  accountType String  @db.VarChar(50)
  avatar      String? @db.VarChar(255)

  role   Role  @relation(fields: [roleId], references: [id])
  roleId Int
  cart   Cart?

  @@map("users")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(255)
  description String @db.VarChar(255)

  users User[]

  @@map("roles")
}

model Order {
  id         Int    @id @default(autoincrement())
  totalPrice Float? @db.Float()

  @@map("orders")
}

model Product {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(255)
  price      Float
  image      String? @db.VarChar(255)
  detailDesc String  @db.Text
  shortDesc  String  @db.VarChar(255)
  quantity   Int
  sold       Int?
  factory    String  @db.VarChar(255)
  target     String  @db.VarChar(255)

  CartDetail CartProduct[]

  @@map("products")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt DateTime

  @@map("sessions")
}

model Cart {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @unique
  sum         Int
  cartDetails CartProduct[]

  @@map("carts")
}

model CartProduct {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  @@map("cart_product")
}
